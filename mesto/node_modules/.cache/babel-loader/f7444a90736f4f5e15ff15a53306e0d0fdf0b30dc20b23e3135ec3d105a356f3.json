{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._token = options.headers.authorization;\n    this._contentType = options.headers['Content-Type'];\n  }\n  getUserInfo() {\n    return fetch(`${this._baseUrl}users/me`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => this._checkStatus(res));\n  }\n  getInitialCards() {\n    return fetch(`${this._baseUrl}cards`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => this._checkStatus(res));\n  }\n  setUserInfo(name, status) {\n    return fetch(`${this._baseUrl}users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': this._contentType\n      },\n      body: JSON.stringify({\n        name: name,\n        about: status\n      })\n    }).then(res => this._checkStatus(res));\n  }\n  setNewCard(data) {\n    return fetch(`${this._baseUrl}cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': this._contentType\n      },\n      body: JSON.stringify({\n        name: data.title,\n        link: data.link\n      })\n    }).then(res => this._checkStatus(res));\n  }\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}cards/${id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': this._contentType\n      }\n    }).then(res => this._checkStatus(res));\n  }\n  addLikeCard(element) {\n    return fetch(`${this._baseUrl}cards/${element.id}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._token,\n        'Content-Type': this._contentType\n      }\n    }).then(res => this._checkStatus(res));\n  }\n  deleteLikeCard(element) {\n    return fetch(`${this._baseUrl}cards/${element.id}/likes`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': this._contentType\n      }\n    }).then(res => this._checkStatus(res));\n  }\n  setAvatar(link) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': this._contentType\n      },\n      body: JSON.stringify({\n        avatar: link\n      })\n    }).then(res => this._checkStatus(res));\n  }\n  _checkStatus(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-77/',\n  headers: {\n    authorization: '4f7a38de-897b-4509-9e7c-9545688bcefc',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_token","headers","authorization","_contentType","getUserInfo","fetch","then","res","_checkStatus","getInitialCards","setUserInfo","name","status","method","body","JSON","stringify","about","setNewCard","data","title","link","deleteCard","id","addLikeCard","element","deleteLikeCard","setAvatar","avatar","ok","json","Promise","reject","api"],"sources":["C:/Users/sabramenkov/Desktop/Новая папка (10)/mesto-react/mesto/src/utils/Api.js"],"sourcesContent":["class Api {\r\n  constructor(options) {\r\n    this._baseUrl = options.baseUrl;\r\n    this._token = options.headers.authorization;\r\n    this._contentType = options.headers['Content-Type'];\r\n  }\r\n\r\n  getUserInfo() {\r\n    return fetch(`${this._baseUrl}users/me`, {\r\n      headers: {\r\n        authorization: this._token\r\n      }\r\n    })\r\n      .then((res) => this._checkStatus(res))\r\n  }\r\n\r\n  getInitialCards() {\r\n    return fetch(`${this._baseUrl}cards`, {\r\n      headers: {\r\n        authorization: this._token\r\n      }\r\n    })\r\n      .then((res) => this._checkStatus(res))\r\n  }\r\n\r\n  setUserInfo(name, status) {\r\n    return fetch(`${this._baseUrl}users/me`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': this._contentType\r\n      },\r\n      body: JSON.stringify({\r\n        name: name,\r\n        about: status\r\n      })\r\n    })\r\n      .then((res) => this._checkStatus(res))\r\n  }\r\n\r\n  setNewCard(data) {\r\n    return fetch(`${this._baseUrl}cards`, {\r\n      method: 'POST',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': this._contentType\r\n      },\r\n      body: JSON.stringify({\r\n        name: data.title,\r\n        link: data.link\r\n      })\r\n    })\r\n      .then((res) => this._checkStatus(res))\r\n  }\r\n\r\n  deleteCard(id) {\r\n    return fetch(`${this._baseUrl}cards/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': this._contentType\r\n      }\r\n    })\r\n      .then((res) => this._checkStatus(res))\r\n  }\r\n\r\n  addLikeCard(element) {\r\n    return fetch(`${this._baseUrl}cards/${element.id}/likes`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': this._contentType\r\n      }\r\n    })\r\n      .then((res) => this._checkStatus(res))\r\n\r\n  }\r\n\r\n  deleteLikeCard(element) {\r\n    return fetch(`${this._baseUrl}cards/${element.id}/likes`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': this._contentType\r\n      }\r\n    })\r\n      .then((res) => this._checkStatus(res))\r\n  }\r\n\r\n  setAvatar(link) {\r\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': this._contentType\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: link\r\n      })\r\n    })\r\n      .then((res) => this._checkStatus(res))\r\n  }\r\n\r\n  _checkStatus(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n\r\n    return Promise.reject(`Ошибка: ${res.status}`)\r\n  }\r\n}\r\n\r\nconst api = new Api({\r\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-77/',\r\n  headers: {\r\n    authorization: '4f7a38de-897b-4509-9e7c-9545688bcefc',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n\r\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}